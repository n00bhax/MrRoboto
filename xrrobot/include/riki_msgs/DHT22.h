// Generated by gencpp from file riki_msgs/DHT22.msg
// DO NOT EDIT!


#ifndef RIKI_MSGS_MESSAGE_DHT22_H
#define RIKI_MSGS_MESSAGE_DHT22_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace riki_msgs
{
template <class ContainerAllocator>
struct DHT22_
{
  typedef DHT22_<ContainerAllocator> Type;

  DHT22_()
    : Temperature(0.0)
    , Humidity(0.0)  {
    }
  DHT22_(const ContainerAllocator& _alloc)
    : Temperature(0.0)
    , Humidity(0.0)  {
  (void)_alloc;
    }



   typedef float _Temperature_type;
  _Temperature_type Temperature;

   typedef float _Humidity_type;
  _Humidity_type Humidity;





  typedef boost::shared_ptr< ::riki_msgs::DHT22_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::riki_msgs::DHT22_<ContainerAllocator> const> ConstPtr;

}; // struct DHT22_

typedef ::riki_msgs::DHT22_<std::allocator<void> > DHT22;

typedef boost::shared_ptr< ::riki_msgs::DHT22 > DHT22Ptr;
typedef boost::shared_ptr< ::riki_msgs::DHT22 const> DHT22ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::riki_msgs::DHT22_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::riki_msgs::DHT22_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::riki_msgs::DHT22_<ContainerAllocator1> & lhs, const ::riki_msgs::DHT22_<ContainerAllocator2> & rhs)
{
  return lhs.Temperature == rhs.Temperature &&
    lhs.Humidity == rhs.Humidity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::riki_msgs::DHT22_<ContainerAllocator1> & lhs, const ::riki_msgs::DHT22_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace riki_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::riki_msgs::DHT22_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::riki_msgs::DHT22_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::riki_msgs::DHT22_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::riki_msgs::DHT22_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::riki_msgs::DHT22_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::riki_msgs::DHT22_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::riki_msgs::DHT22_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5444ed9cc78ceaace5058c55fe815905";
  }

  static const char* value(const ::riki_msgs::DHT22_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5444ed9cc78ceaacULL;
  static const uint64_t static_value2 = 0xe5058c55fe815905ULL;
};

template<class ContainerAllocator>
struct DataType< ::riki_msgs::DHT22_<ContainerAllocator> >
{
  static const char* value()
  {
    return "riki_msgs/DHT22";
  }

  static const char* value(const ::riki_msgs::DHT22_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::riki_msgs::DHT22_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Temperature\n"
"float32 Humidity\n"
;
  }

  static const char* value(const ::riki_msgs::DHT22_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::riki_msgs::DHT22_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Temperature);
      stream.next(m.Humidity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DHT22_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::riki_msgs::DHT22_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::riki_msgs::DHT22_<ContainerAllocator>& v)
  {
    s << indent << "Temperature: ";
    Printer<float>::stream(s, indent + "  ", v.Temperature);
    s << indent << "Humidity: ";
    Printer<float>::stream(s, indent + "  ", v.Humidity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIKI_MSGS_MESSAGE_DHT22_H
